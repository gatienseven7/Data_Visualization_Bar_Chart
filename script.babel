import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

let dataArray = [];

fetch(
  "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json"
)
  .then((response) => response.json()) 
  .then((data) => {
    dataArray = data.data;

    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 900 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3
      .select("body")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom);

    svg.append("text").attr("id", "title").text("Gross Domestic Product (GDP)");

    const xScale = d3
      .scaleTime()
      .domain([
        d3.min(dataArray, (d) => new Date(d[0])),
        d3.max(dataArray, (d) => new Date(d[0]))
      ])
      .range([0, width]);

    const yScale = d3
      .scaleLinear()
      .domain([0, d3.max(dataArray, (d) => d[1])])
      .range([height, 0]);

    // Créer l'axe X avec un format de date
    const xAxis = d3
      .axisBottom(xScale)
      .ticks(5)
      .tickFormat(d3.timeFormat("%Y"));

    // Ajouter l'axe X à l'SVG
    svg
      .append("g")
      .attr("id", "x-axis")
      .attr("transform", `translate(${margin.left}, ${height})`)
      .call(xAxis)
      .selectAll(".tick")
      .attr("class", "tick");

    // Créer l'axe Y
    const yAxis = d3.axisLeft(yScale).ticks(5);

    // Ajouter l'axe Y à l'SVG
    svg
      .append("g")
      .attr("id", "y-axis")
      .attr("transform", `translate(${margin.left}, 0)`)
      .call(yAxis);

    const tooltip = d3
      .select("body")
      .append("div")
      .attr("id", "tooltip")
      .style("opacity", 0);

    
    svg
      .selectAll(".bar")
      .data(dataArray)
      .enter()
      .append("rect")
      .attr("class", "bar")
      .attr("data-date", (d) => d[0])
      .attr("data-gdp", (d) => d[1])
      .attr("x", (d) => margin.left + xScale(new Date(d[0])))
      .attr("y", (d) => yScale(d[1]))
      .attr("width", width / dataArray.length)
      .attr("height", (d) => height - yScale(d[1]))
      .attr("fill", "steelblue")
      .on("mouseover", function (event, d) {
        tooltip.transition().duration(200).style("opacity", 1); // Fade in
        tooltip
          .html(`${d[0]}<br>$:${d[1]}`)
          .attr("data-date", d[0])
          .style("left", event.pageX + 10 + "px")
          .style("top", event.pageY - 28 + "px");
      })
      .on("mouseout", function () {
        tooltip.transition().duration(200).style("opacity", 0); // Fade out
      });
  });
